{"ast":null,"code":"var _jsxFileName = \"/home/test01/websocketWithRabbitMQ/client/src/views/rabbitmq/index.jsx\";\nimport React, { memo } from 'react';\n//import '../../ts/stomp.ts'\n\n/**\n\t/queue/queuename：使用默认转发器订阅/发布消息，默认由stomp自动创建一个持久化队列 \n\n\t/amq/queue/queuename：与/queue/queuename的区别在于队列不由stomp自动进行创建，队列不存在失败 \n\n\t/topic/routing_key：通过amq.topic转发器订阅/发布消息，订阅时默认创建一个临时队列，通过routing_key与topic进行绑定 \n\n\t/temp-queue/xxx：创建一个临时队列(只能在headers中的属性reply-to中使用)，可用于发送消息后通过临时队列接收回复消息，接收通过client.onreceive \n\n\t/exchange/exchangename/[routing_key]：通过转发器订阅/发布消息，转发器需要手动创建 \n\n\tclient.subscribe(destination,callback,headers) ：订阅消息 \n\n\tclient.send(destination,headers,body)：发布消息 \n\n\tclient.unsubscribe(id)：取消订阅，id为订阅时返回的编号 \n\n\tclient.onreceive：默认接收回调从临时队列获取消息 \n\t\n\t*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Rabbitmq = /*#__PURE__*/memo(_c = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"rabbitmqMain\",\n    children: \"Rabbitmq\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n});\n_c2 = Rabbitmq;\nexport default Rabbitmq;\nvar _c, _c2;\n$RefreshReg$(_c, \"Rabbitmq$memo\");\n$RefreshReg$(_c2, \"Rabbitmq\");","map":{"version":3,"names":["React","memo","jsxDEV","_jsxDEV","Rabbitmq","_c","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/home/test01/websocketWithRabbitMQ/client/src/views/rabbitmq/index.jsx"],"sourcesContent":["import React, { memo } from 'react'\n//import '../../ts/stomp.ts'\n\n/**\n\t/queue/queuename：使用默认转发器订阅/发布消息，默认由stomp自动创建一个持久化队列 \n\n\t/amq/queue/queuename：与/queue/queuename的区别在于队列不由stomp自动进行创建，队列不存在失败 \n\n\t/topic/routing_key：通过amq.topic转发器订阅/发布消息，订阅时默认创建一个临时队列，通过routing_key与topic进行绑定 \n\n\t/temp-queue/xxx：创建一个临时队列(只能在headers中的属性reply-to中使用)，可用于发送消息后通过临时队列接收回复消息，接收通过client.onreceive \n\n\t/exchange/exchangename/[routing_key]：通过转发器订阅/发布消息，转发器需要手动创建 \n\n\tclient.subscribe(destination,callback,headers) ：订阅消息 \n\n\tclient.send(destination,headers,body)：发布消息 \n\n\tclient.unsubscribe(id)：取消订阅，id为订阅时返回的编号 \n\n\tclient.onreceive：默认接收回调从临时队列获取消息 \n\t\n\t*/\n    \nconst Rabbitmq = memo(() => {\n    return (\n        <div className='rabbitmqMain'>Rabbitmq</div>\n    )\n})\n\nexport default Rabbitmq"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,IAAI,QAAQ,OAAO;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA,SAAAC,MAAA,IAAAC,OAAA;AAqBA,MAAMC,QAAQ,gBAAGH,IAAI,CAAAI,EAAA,GAACA,CAAA,KAAM;EACxB,oBACIF,OAAA;IAAKG,SAAS,EAAC,cAAc;IAAAC,QAAA,EAAC;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAEpD,CAAC,CAAC;AAAAC,GAAA,GAJIR,QAAQ;AAMd,eAAeA,QAAQ;AAAA,IAAAC,EAAA,EAAAO,GAAA;AAAAC,YAAA,CAAAR,EAAA;AAAAQ,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}