{"ast":null,"code":"var _jsxFileName = \"/home/test01/websocketWithRabbitMQ/client/src/views/rabbitmq/index.jsx\";\nimport React from 'react';\nimport { Stomp } from '@stomp/stompjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar ws = new WebSocket('ws://104.128.95.54:3030/websockets/test');\n// 获得Stomp client对象\nvar client = Stomp.over(ws);\n\n// SockJS does not support heart-beat: disable heart-beats\nclient.heartbeat.outgoing = 0;\nclient.heartbeat.incoming = 0;\n\n// 定义连接成功回调函数\nvar on_connect = function (x) {\n  client.send(\"exchange.direct\", \"ctra.news\", \"ctra.news\");\n  //data.body是接收到的数据\n  client.subscribe(\"exchange.direct\", \"ctra.news\", function (data) {\n    var msg = data.body;\n    //$(\"#message\").append(\"收到数据：\" + msg);\n    console.log('message : ' + msg);\n  });\n};\n\n// 定义错误时回调函数\nvar on_error = function () {\n  console.log('error');\n};\n\n// 连接RabbitMQ\nclient.connect('guest', 'guest', on_connect, on_error, '/');\nconsole.log(\">>>连接上http://104.128.95.54:15672/\");\nclass LogComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      logs: []\n    }; // 初始化logs状态数组\n  }\n  componentDidMount() {\n    console.log('component mounted'); // 测试mounted事件\n\n    const originalConsoleLog = window.console.log; // 保存原始的console.log函数\n\n    window.console.log = (...args) => {\n      this.setState({\n        logs: [...this.state.logs, args]\n      }); // 更新logs状态数组\n\n      if (typeof originalConsoleLog === 'function') {\n        originalConsoleLog(...args); // 调用原始的console.log函数\n      } else {\n        throw new Error(\"originalConsoleLog is not a function\");\n      }\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rabbitmqMain\",\n      children: this.renderLogs()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 16\n    }, this);\n  }\n  renderLogs() {\n    return this.state.logs.map(([message]) => /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        whiteSpace: \"pre\"\n      },\n      children: `${message}`\n    }, Math.random(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 51\n    }, this));\n  }\n}\nexport default LogComponent;","map":{"version":3,"names":["React","Stomp","jsxDEV","_jsxDEV","ws","WebSocket","client","over","heartbeat","outgoing","incoming","on_connect","x","send","subscribe","data","msg","body","console","log","on_error","connect","LogComponent","Component","constructor","props","state","logs","componentDidMount","originalConsoleLog","window","args","setState","Error","render","className","children","renderLogs","fileName","_jsxFileName","lineNumber","columnNumber","map","message","style","whiteSpace","Math","random"],"sources":["/home/test01/websocketWithRabbitMQ/client/src/views/rabbitmq/index.jsx"],"sourcesContent":["import React from 'react'\nimport { Stomp } from '@stomp/stompjs'\n\nvar ws = new WebSocket('ws://104.128.95.54:3030/websockets/test');\n\t\t// 获得Stomp client对象\n\t\tvar client = Stomp.over(ws);\n\t\n\t\t// SockJS does not support heart-beat: disable heart-beats\n\t\tclient.heartbeat.outgoing = 0;\n\t\tclient.heartbeat.incoming = 0;\n\t\n\t\t// 定义连接成功回调函数\n\t\tvar on_connect = function(x) {\n\t\t\tclient.send(\"exchange.direct\",\"ctra.news\",\"ctra.news\");\n\t\t\t//data.body是接收到的数据\n\t\t\tclient.subscribe(\"exchange.direct\", \"ctra.news\",function(data) {\n\t\t\t\tvar msg = data.body;\n\t\t\t\t//$(\"#message\").append(\"收到数据：\" + msg);\n\t\t\t\tconsole.log('message : ' + msg);\n\t\t\t});\n\t\t};\n\t\n\t\t// 定义错误时回调函数\n\t\tvar on_error =  function() {\n\t\t\tconsole.log('error');\n\t\t};\n\t\n\t\t// 连接RabbitMQ\n\t\tclient.connect('guest', 'guest', on_connect, on_error, '/');\n\t\tconsole.log(\">>>连接上http://104.128.95.54:15672/\");\n\n\nclass LogComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { logs: [] }; // 初始化logs状态数组\n    }\n    \n    componentDidMount() {\n        console.log('component mounted'); // 测试mounted事件\n        \n        const originalConsoleLog = window.console.log; // 保存原始的console.log函数\n        \n        window.console.log = (...args) => {\n            this.setState({ logs: [...this.state.logs, args] }); // 更新logs状态数组\n            \n            if (typeof originalConsoleLog === 'function') {\n                originalConsoleLog(...args); // 调用原始的console.log函数\n            } else {\n                throw new Error(\"originalConsoleLog is not a function\");\n            }\n        };\n    }\n    \n    render() {\n        return <div className='rabbitmqMain'>{this.renderLogs()}</div>;\n    }\n    \n    renderLogs() {\n        return this.state.logs.map(([message]) => <p key={Math.random()} style={{ whiteSpace: \"pre\" }}>{`${message}`}</p>);\n    }\n}\n \nexport default LogComponent;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,gBAAgB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtC,IAAIC,EAAE,GAAG,IAAIC,SAAS,CAAC,yCAAyC,CAAC;AAC/D;AACA,IAAIC,MAAM,GAAGL,KAAK,CAACM,IAAI,CAACH,EAAE,CAAC;;AAE3B;AACAE,MAAM,CAACE,SAAS,CAACC,QAAQ,GAAG,CAAC;AAC7BH,MAAM,CAACE,SAAS,CAACE,QAAQ,GAAG,CAAC;;AAE7B;AACA,IAAIC,UAAU,GAAG,SAAAA,CAASC,CAAC,EAAE;EAC5BN,MAAM,CAACO,IAAI,CAAC,iBAAiB,EAAC,WAAW,EAAC,WAAW,CAAC;EACtD;EACAP,MAAM,CAACQ,SAAS,CAAC,iBAAiB,EAAE,WAAW,EAAC,UAASC,IAAI,EAAE;IAC9D,IAAIC,GAAG,GAAGD,IAAI,CAACE,IAAI;IACnB;IACAC,OAAO,CAACC,GAAG,CAAC,YAAY,GAAGH,GAAG,CAAC;EAChC,CAAC,CAAC;AACH,CAAC;;AAED;AACA,IAAII,QAAQ,GAAI,SAAAA,CAAA,EAAW;EAC1BF,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;AACrB,CAAC;;AAED;AACAb,MAAM,CAACe,OAAO,CAAC,OAAO,EAAE,OAAO,EAAEV,UAAU,EAAES,QAAQ,EAAE,GAAG,CAAC;AAC3DF,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;AAGlD,MAAMG,YAAY,SAAStB,KAAK,CAACuB,SAAS,CAAC;EACvCC,WAAWA,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MAAEC,IAAI,EAAE;IAAG,CAAC,CAAC,CAAC;EAC/B;EAEAC,iBAAiBA,CAAA,EAAG;IAChBV,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC,CAAC,CAAC;;IAElC,MAAMU,kBAAkB,GAAGC,MAAM,CAACZ,OAAO,CAACC,GAAG,CAAC,CAAC;;IAE/CW,MAAM,CAACZ,OAAO,CAACC,GAAG,GAAG,CAAC,GAAGY,IAAI,KAAK;MAC9B,IAAI,CAACC,QAAQ,CAAC;QAAEL,IAAI,EAAE,CAAC,GAAG,IAAI,CAACD,KAAK,CAACC,IAAI,EAAEI,IAAI;MAAE,CAAC,CAAC,CAAC,CAAC;;MAErD,IAAI,OAAOF,kBAAkB,KAAK,UAAU,EAAE;QAC1CA,kBAAkB,CAAC,GAAGE,IAAI,CAAC,CAAC,CAAC;MACjC,CAAC,MAAM;QACH,MAAM,IAAIE,KAAK,CAAC,sCAAsC,CAAC;MAC3D;IACJ,CAAC;EACL;EAEAC,MAAMA,CAAA,EAAG;IACL,oBAAO/B,OAAA;MAAKgC,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAE,IAAI,CAACC,UAAU,CAAC;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAClE;EAEAJ,UAAUA,CAAA,EAAG;IACT,OAAO,IAAI,CAACX,KAAK,CAACC,IAAI,CAACe,GAAG,CAAC,CAAC,CAACC,OAAO,CAAC,kBAAKxC,OAAA;MAAuByC,KAAK,EAAE;QAAEC,UAAU,EAAE;MAAM,CAAE;MAAAT,QAAA,EAAG,GAAEO,OAAQ;IAAC,GAA1DG,IAAI,CAACC,MAAM,CAAC,CAAC;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAiD,CAAC,CAAC;EACtH;AACJ;AAEA,eAAenB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}