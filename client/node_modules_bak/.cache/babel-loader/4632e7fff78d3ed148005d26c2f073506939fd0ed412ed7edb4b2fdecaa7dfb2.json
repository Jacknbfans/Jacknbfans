{"ast":null,"code":"var _jsxFileName = \"/home/test01/websocketWithRabbitMQ/client/src/views/rabbitmq/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataComponent = () => {\n  _s();\n  const [data, setData] = useState([]); // 初始化为空数组\n\n  // ...其他代码...\n};\n_s(DataComponent, \"hhQqYsxLIv1exGOzUvDGOVv6fXw=\");\n_c = DataComponent;\nuseEffect(() => {\n  async function fetchData() {\n    try {\n      const response = await axios.get('http://104.128.95.54:3030/consumer'); // 根据实际情况修改URL地址\n      setData(response.data);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  fetchData();\n}, []); // 传入空数组作为第二个参数表示只有在组件加载时才会调用fetchData函数\n\nclass LogComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      logs: []\n    }; // 初始化logs状态数组\n  }\n  componentDidMount() {\n    console.log('component mounted'); // 测试mounted事件\n\n    const originalConsoleLog = window.console.log; // 保存原始的console.log函数\n\n    window.console.log = (...args) => {\n      this.setState({\n        logs: [...this.state.logs, args]\n      }); // 更新logs状态数组\n\n      if (typeof originalConsoleLog === 'function') {\n        originalConsoleLog(...args); // 调用原始的console.log函数\n      } else {\n        throw new Error(\"originalConsoleLog is not a function\");\n      }\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rabbitmqMain\",\n      children: this.renderLogs()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 16\n    }, this);\n  }\n  renderLogs() {\n    return this.state.logs.map(([message]) => /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        whiteSpace: \"pre\"\n      },\n      children: `${message}`\n    }, Math.random(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 51\n    }, this));\n  }\n}\nexport default LogComponent;\nvar _c;\n$RefreshReg$(_c, \"DataComponent\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","DataComponent","_s","data","setData","_c","fetchData","response","get","error","console","log","LogComponent","Component","constructor","props","state","logs","componentDidMount","originalConsoleLog","window","args","setState","Error","render","className","children","renderLogs","fileName","_jsxFileName","lineNumber","columnNumber","map","message","style","whiteSpace","Math","random","$RefreshReg$"],"sources":["/home/test01/websocketWithRabbitMQ/client/src/views/rabbitmq/index.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst DataComponent = () => {\n    const [data, setData] = useState([]); // 初始化为空数组\n    \n    // ...其他代码...\n}\n\nuseEffect(() => {\n\tasync function fetchData() {\n\t   try {\n\t\t  const response = await axios.get('http://104.128.95.54:3030/consumer'); // 根据实际情况修改URL地址\n\t\t  setData(response.data);\n\t   } catch (error) {\n\t\t  console.log(error);\n\t   }\n\t}\n\tfetchData();\n }, []); // 传入空数组作为第二个参数表示只有在组件加载时才会调用fetchData函数\n\nclass LogComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { logs: [] }; // 初始化logs状态数组\n    }\n    \n    componentDidMount() {\n        console.log('component mounted'); // 测试mounted事件\n        \n        const originalConsoleLog = window.console.log; // 保存原始的console.log函数\n        \n        window.console.log = (...args) => {\n            this.setState({ logs: [...this.state.logs, args] }); // 更新logs状态数组\n            \n            if (typeof originalConsoleLog === 'function') {\n                originalConsoleLog(...args); // 调用原始的console.log函数\n            } else {\n                throw new Error(\"originalConsoleLog is not a function\");\n            }\n        };\n    }\n    \n    render() {\n        return <div className='rabbitmqMain'>{this.renderLogs()}</div>;\n    }\n    \n    renderLogs() {\n        return this.state.logs.map(([message]) => <p key={Math.random()} style={{ whiteSpace: \"pre\" }}>{`${message}`}</p>);\n    }\n}\n \nexport default LogComponent;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEtC;AACJ,CAAC;AAAAK,EAAA,CAJKD,aAAa;AAAAI,EAAA,GAAbJ,aAAa;AAMnBL,SAAS,CAAC,MAAM;EACf,eAAeU,SAASA,CAAA,EAAG;IACxB,IAAI;MACJ,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAC,oCAAoC,CAAC,CAAC,CAAC;MACxEJ,OAAO,CAACG,QAAQ,CAACJ,IAAI,CAAC;IACtB,CAAC,CAAC,OAAOM,KAAK,EAAE;MAChBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB;EACH;EACAH,SAAS,CAAC,CAAC;AACX,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;AAET,MAAMM,YAAY,SAASjB,KAAK,CAACkB,SAAS,CAAC;EACvCC,WAAWA,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MAAEC,IAAI,EAAE;IAAG,CAAC,CAAC,CAAC;EAC/B;EAEAC,iBAAiBA,CAAA,EAAG;IAChBR,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC,CAAC,CAAC;;IAElC,MAAMQ,kBAAkB,GAAGC,MAAM,CAACV,OAAO,CAACC,GAAG,CAAC,CAAC;;IAE/CS,MAAM,CAACV,OAAO,CAACC,GAAG,GAAG,CAAC,GAAGU,IAAI,KAAK;MAC9B,IAAI,CAACC,QAAQ,CAAC;QAAEL,IAAI,EAAE,CAAC,GAAG,IAAI,CAACD,KAAK,CAACC,IAAI,EAAEI,IAAI;MAAE,CAAC,CAAC,CAAC,CAAC;;MAErD,IAAI,OAAOF,kBAAkB,KAAK,UAAU,EAAE;QAC1CA,kBAAkB,CAAC,GAAGE,IAAI,CAAC,CAAC,CAAC;MACjC,CAAC,MAAM;QACH,MAAM,IAAIE,KAAK,CAAC,sCAAsC,CAAC;MAC3D;IACJ,CAAC;EACL;EAEAC,MAAMA,CAAA,EAAG;IACL,oBAAOxB,OAAA;MAAKyB,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAE,IAAI,CAACC,UAAU,CAAC;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAClE;EAEAJ,UAAUA,CAAA,EAAG;IACT,OAAO,IAAI,CAACX,KAAK,CAACC,IAAI,CAACe,GAAG,CAAC,CAAC,CAACC,OAAO,CAAC,kBAAKjC,OAAA;MAAuBkC,KAAK,EAAE;QAAEC,UAAU,EAAE;MAAM,CAAE;MAAAT,QAAA,EAAG,GAAEO,OAAQ;IAAC,GAA1DG,IAAI,CAACC,MAAM,CAAC,CAAC;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAiD,CAAC,CAAC;EACtH;AACJ;AAEA,eAAenB,YAAY;AAAC,IAAAP,EAAA;AAAAiC,YAAA,CAAAjC,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}