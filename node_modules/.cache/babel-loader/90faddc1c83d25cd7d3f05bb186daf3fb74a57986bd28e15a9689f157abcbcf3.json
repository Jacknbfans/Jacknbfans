{"ast":null,"code":"var _jsxFileName = \"/home/test01/websocketWithRabbitMQ/client/src/views/rabbitmq/index.jsx\";\n//import React, { Component , useRef } from 'react'\nimport React, { Component } from 'react';\nimport { Stomp } from '@stomp/stompjs';\n\n/**\n\t/queue/queuename：使用默认转发器订阅/发布消息，默认由stomp自动创建一个持久化队列 \n\n\t/amq/queue/queuename：与/queue/queuename的区别在于队列不由stomp自动进行创建，队列不存在失败 \n\n\t/topic/routing_key：通过amq.topic转发器订阅/发布消息，订阅时默认创建一个临时队列，通过routing_key与topic进行绑定 \n\n\t/temp-queue/xxx：创建一个临时队列(只能在headers中的属性reply-to中使用)，可用于发送消息后通过临时队列接收回复消息，接收通过client.onreceive \n\n\t/exchange/exchangename/[routing_key]：通过转发器订阅/发布消息，转发器需要手动创建 \n\n\tclient.subscribe(destination,callback,headers) ：订阅消息 \n\n\tclient.send(destination,headers,body)：发布消息 \n\n\tclient.unsubscribe(id)：取消订阅，id为订阅时返回的编号 \n\n\tclient.onreceive：默认接收回调从临时队列获取消息 \n\t\n\t*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar ws = new WebSocket('ws://104.128.95.54:3030/websockets/test');\n// 获得Stomp client对象\nvar client = Stomp.over(ws);\n\n// SockJS does not support heart-beat: disable heart-beats\nclient.heartbeat.outgoing = 0;\nclient.heartbeat.incoming = 0;\n\n// 定义连接成功回调函数\nvar on_connect = function (x) {\n  //data.body是接收到的数据\n  client.subscribe(\"/exchange/exchange/test\", function (data) {\n    var msg = data.body;\n    //$(\"#message\").append(\"收到数据：\" + msg);\n    console.log('message : ' + msg);\n  });\n};\n\n// 定义错误时回调函数\nvar on_error = function () {\n  console.log('error');\n};\n\n// 连接RabbitMQ\nclient.connect('guest', 'guest', on_connect, on_error, '/');\nconsole.log(\">>>连接上http://104.128.95.54:15672/\");\n\n//const iRef = useRef<HTMLIFrameElement | null>(null);\nconst handleLoad = () => {\n  setTimeout(() => {\n    //iRef.current.contentWindow.postMessage('hello', '*');\n    console.log('this is handleLoad');\n  }, [100]);\n};\nexport default class Rabbitmq extends Component {\n  constructor() {\n    super();\n    this.execComd = this.execComd.bind(this);\n    this.myRef = /*#__PURE__*/React.createRef();\n  }\n  componentDidMount() {}\n  execComd(command) {\n    console.log(\"666\");\n    console.log(this.myRef.current.contentWindow.postMessage('hello', '*'));\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rabbitmqMain\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.execComd('bold'),\n          children: \"Click\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"iframe\", {\n          ref: this.myRef,\n          onLoad: handleLoad,\n          id: \"rabbitmq\",\n          name: \"rabbitmq\",\n          src: \"http://104.128.95.54:15672\",\n          title: \"rabbitmq\",\n          width: \"100%\",\n          height: \"100%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n}","map":{"version":3,"names":["React","Component","Stomp","jsxDEV","_jsxDEV","Fragment","_Fragment","ws","WebSocket","client","over","heartbeat","outgoing","incoming","on_connect","x","subscribe","data","msg","body","console","log","on_error","connect","handleLoad","setTimeout","Rabbitmq","constructor","execComd","bind","myRef","createRef","componentDidMount","command","current","contentWindow","postMessage","render","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","onLoad","id","name","src","title","width","height"],"sources":["/home/test01/websocketWithRabbitMQ/client/src/views/rabbitmq/index.jsx"],"sourcesContent":["//import React, { Component , useRef } from 'react'\nimport React, { Component } from 'react'\n\nimport { Stomp } from '@stomp/stompjs'\n\n/**\n\t/queue/queuename：使用默认转发器订阅/发布消息，默认由stomp自动创建一个持久化队列 \n\n\t/amq/queue/queuename：与/queue/queuename的区别在于队列不由stomp自动进行创建，队列不存在失败 \n\n\t/topic/routing_key：通过amq.topic转发器订阅/发布消息，订阅时默认创建一个临时队列，通过routing_key与topic进行绑定 \n\n\t/temp-queue/xxx：创建一个临时队列(只能在headers中的属性reply-to中使用)，可用于发送消息后通过临时队列接收回复消息，接收通过client.onreceive \n\n\t/exchange/exchangename/[routing_key]：通过转发器订阅/发布消息，转发器需要手动创建 \n\n\tclient.subscribe(destination,callback,headers) ：订阅消息 \n\n\tclient.send(destination,headers,body)：发布消息 \n\n\tclient.unsubscribe(id)：取消订阅，id为订阅时返回的编号 \n\n\tclient.onreceive：默认接收回调从临时队列获取消息 \n\t\n\t*/\n\n    var ws = new WebSocket('ws://104.128.95.54:3030/websockets/test');\n\t// 获得Stomp client对象\n\tvar client = Stomp.over(ws);\n\n\t// SockJS does not support heart-beat: disable heart-beats\n\tclient.heartbeat.outgoing = 0;\n\tclient.heartbeat.incoming = 0;\n\n\t// 定义连接成功回调函数\n\tvar on_connect = function(x) {\n\t\t//data.body是接收到的数据\n\t\tclient.subscribe(\"/exchange/exchange/test\", function(data) {\n\t\t\tvar msg = data.body;\n\t\t\t//$(\"#message\").append(\"收到数据：\" + msg);\n            console.log('message : ' + msg);\n\t\t});\n\t};\n\n\t// 定义错误时回调函数\n\tvar on_error =  function() {\n\t\tconsole.log('error');\n\t};\n\n\t// 连接RabbitMQ\n\tclient.connect('guest', 'guest', on_connect, on_error, '/');\n\tconsole.log(\">>>连接上http://104.128.95.54:15672/\");\n\n//const iRef = useRef<HTMLIFrameElement | null>(null);\nconst handleLoad = () => {\n  setTimeout(() => {  \n   //iRef.current.contentWindow.postMessage('hello', '*');\n   console.log('this is handleLoad');\n  }, [100]);\n}\n\nexport default class Rabbitmq extends Component {\n\n    constructor(){\n        super()\n        this.execComd = this.execComd.bind(this)\n        this.myRef=React.createRef();\n    }\n\n    componentDidMount(){\n      \n    }\n\n    execComd(command){\n      console.log(\"666\");\n      console.log(this.myRef.current.contentWindow.postMessage('hello', '*'));\n    \n    }\n\n    render() {\n        return (\n            <> \n                <div className='rabbitmqMain'>\n                    <button onClick={()=>this.execComd('bold')}>Click</button>\n                    <iframe ref={this.myRef} onLoad={handleLoad} id=\"rabbitmq\" name=\"rabbitmq\" src='http://104.128.95.54:15672' title='rabbitmq' width='100%' height='100%' />\n                </div>\n            </>\n        )\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}