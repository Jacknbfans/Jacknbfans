{"ast":null,"code":"import { Client } from './client';\nimport { HeartbeatInfo } from './heartbeat-info';\n\n/**\n * Available for backward compatibility, please shift to using {@link Client}.\n *\n * **Deprecated**\n *\n * Part of `@stomp/stompjs`.\n *\n * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n */\nexport class CompatClient extends Client {\n  /**\n   * Available for backward compatibility, please shift to using {@link Client}\n   * and [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   *\n   * **Deprecated**\n   *\n   * @internal\n   */\n  constructor(webSocketFactory) {\n    super();\n    /**\n     * It is no op now. No longer needed. Large packets work out of the box.\n     */\n    this.maxWebSocketFrameSize = 16 * 1024;\n    this._heartbeatInfo = new HeartbeatInfo(this);\n    this.reconnect_delay = 0;\n    this.webSocketFactory = webSocketFactory;\n    // Default from previous version\n    this.debug = (...message) => {\n      console.log(...message);\n    };\n  }\n  _parseConnect(...args) {\n    let closeEventCallback;\n    let connectCallback;\n    let errorCallback;\n    let headers = {};\n    if (args.length < 2) {\n      throw new Error('Connect requires at least 2 arguments');\n    }\n    if (typeof args[1] === 'function') {\n      [headers, connectCallback, errorCallback, closeEventCallback] = args;\n    } else {\n      switch (args.length) {\n        case 6:\n          [headers.login, headers.passcode, connectCallback, errorCallback, closeEventCallback, headers.host] = args;\n          break;\n        default:\n          [headers.login, headers.passcode, connectCallback, errorCallback, closeEventCallback] = args;\n      }\n    }\n    return [headers, connectCallback, errorCallback, closeEventCallback];\n  }\n\n  /**\n   * Available for backward compatibility, please shift to using [Client#activate]{@link Client#activate}.\n   *\n   * **Deprecated**\n   *\n   * The `connect` method accepts different number of arguments and types. See the Overloads list. Use the\n   * version with headers to pass your broker specific options.\n   *\n   * overloads:\n   * - connect(headers, connectCallback)\n   * - connect(headers, connectCallback, errorCallback)\n   * - connect(login, passcode, connectCallback)\n   * - connect(login, passcode, connectCallback, errorCallback)\n   * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback)\n   * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback, host)\n   *\n   * params:\n   * - headers, see [Client#connectHeaders]{@link Client#connectHeaders}\n   * - connectCallback, see [Client#onConnect]{@link Client#onConnect}\n   * - errorCallback, see [Client#onStompError]{@link Client#onStompError}\n   * - closeEventCallback, see [Client#onWebSocketClose]{@link Client#onWebSocketClose}\n   * - login [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n   * - passcode [String], [Client#connectHeaders](../classes/Client.html#connectHeaders)\n   * - host [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n   *\n   * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n   */\n  connect(...args) {\n    const out = this._parseConnect(...args);\n    if (out[0]) {\n      this.connectHeaders = out[0];\n    }\n    if (out[1]) {\n      this.onConnect = out[1];\n    }\n    if (out[2]) {\n      this.onStompError = out[2];\n    }\n    if (out[3]) {\n      this.onWebSocketClose = out[3];\n    }\n    super.activate();\n  }\n\n  /**\n   * Available for backward compatibility, please shift to using [Client#deactivate]{@link Client#deactivate}.\n   *\n   * **Deprecated**\n   *\n   * See:\n   * [Client#onDisconnect]{@link Client#onDisconnect}, and\n   * [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n   *\n   * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n   */\n  disconnect(disconnectCallback, headers = {}) {\n    if (disconnectCallback) {\n      this.onDisconnect = disconnectCallback;\n    }\n    this.disconnectHeaders = headers;\n    super.deactivate();\n  }\n\n  /**\n   * Available for backward compatibility, use [Client#publish]{@link Client#publish}.\n   *\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\n   * and naming of destinations. The headers will, typically, be available to the subscriber.\n   * However, there may be special purpose headers corresponding to your STOMP broker.\n   *\n   *  **Deprecated**, use [Client#publish]{@link Client#publish}\n   *\n   * Note: Body must be String. You will need to covert the payload to string in case it is not string (e.g. JSON)\n   *\n   * ```javascript\n   *        client.send(\"/queue/test\", {priority: 9}, \"Hello, STOMP\");\n   *\n   *        // If you want to send a message with a body, you must also pass the headers argument.\n   *        client.send(\"/queue/test\", {}, \"Hello, STOMP\");\n   * ```\n   *\n   * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n   */\n  send(destination, headers = {}, body = '') {\n    headers = Object.assign({}, headers);\n    const skipContentLengthHeader = headers['content-length'] === false;\n    if (skipContentLengthHeader) {\n      delete headers['content-length'];\n    }\n    this.publish({\n      destination,\n      headers: headers,\n      body,\n      skipContentLengthHeader\n    });\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#reconnectDelay]{@link Client#reconnectDelay}.\n   *\n   * **Deprecated**\n   */\n  set reconnect_delay(value) {\n    this.reconnectDelay = value;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#webSocket]{@link Client#webSocket}.\n   *\n   * **Deprecated**\n   */\n  get ws() {\n    return this._webSocket;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#connectedVersion]{@link Client#connectedVersion}.\n   *\n   * **Deprecated**\n   */\n  get version() {\n    return this.connectedVersion;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n   *\n   * **Deprecated**\n   */\n  get onreceive() {\n    return this.onUnhandledMessage;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n   *\n   * **Deprecated**\n   */\n  set onreceive(value) {\n    this.onUnhandledMessage = value;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n   * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}.\n   *\n   * **Deprecated**\n   */\n  get onreceipt() {\n    return this.onUnhandledReceipt;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n   *\n   * **Deprecated**\n   */\n  set onreceipt(value) {\n    this.onUnhandledReceipt = value;\n  }\n  /**\n   * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n   * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n   *\n   * **Deprecated**\n   */\n  get heartbeat() {\n    return this._heartbeatInfo;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n   * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n   *\n   * **Deprecated**\n   */\n  set heartbeat(value) {\n    this.heartbeatIncoming = value.incoming;\n    this.heartbeatOutgoing = value.outgoing;\n  }\n}","map":{"version":3,"names":["Client","HeartbeatInfo","CompatClient","constructor","webSocketFactory","maxWebSocketFrameSize","_heartbeatInfo","reconnect_delay","debug","message","console","log","_parseConnect","args","closeEventCallback","connectCallback","errorCallback","headers","length","Error","login","passcode","host","connect","out","connectHeaders","onConnect","onStompError","onWebSocketClose","activate","disconnect","disconnectCallback","onDisconnect","disconnectHeaders","deactivate","send","destination","body","Object","assign","skipContentLengthHeader","publish","value","reconnectDelay","ws","_webSocket","version","connectedVersion","onreceive","onUnhandledMessage","onreceipt","onUnhandledReceipt","heartbeat","heartbeatIncoming","incoming","heartbeatOutgoing","outgoing"],"sources":["/home/test01/websocketWithRabbitMQ/client/src/ts/compat-client.ts"],"sourcesContent":["import {Client} from './client';\nimport {StompHeaders} from './stomp-headers';\nimport {frameCallbackType, messageCallbackType} from './types';\nimport {HeartbeatInfo} from './heartbeat-info';\n\n/**\n * Available for backward compatibility, please shift to using {@link Client}.\n *\n * **Deprecated**\n *\n * Part of `@stomp/stompjs`.\n *\n * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n */\nexport class CompatClient extends Client {\n\n  /**\n   * It is no op now. No longer needed. Large packets work out of the box.\n   */\n  public maxWebSocketFrameSize: number = 16 * 1024;\n\n  /**\n   * Available for backward compatibility, please shift to using {@link Client}\n   * and [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   *\n   * **Deprecated**\n   *\n   * @internal\n   */\n  constructor(webSocketFactory: () => any) {\n    super();\n    this.reconnect_delay = 0;\n    this.webSocketFactory = webSocketFactory;\n    // Default from previous version\n    this.debug = (...message: any[]) => {\n      console.log(...message);\n    };\n  }\n\n  private _parseConnect(...args: any[]): any {\n    let closeEventCallback;\n    let connectCallback;\n    let errorCallback;\n    let headers: StompHeaders = {};\n    if (args.length < 2) {\n      throw new Error(('Connect requires at least 2 arguments'));\n    }\n    if (typeof(args[1]) === 'function') {\n      [headers, connectCallback, errorCallback, closeEventCallback] = args;\n    } else {\n      switch (args.length) {\n        case 6:\n          [headers.login, headers.passcode, connectCallback, errorCallback, closeEventCallback, headers.host] = args;\n          break;\n        default:\n          [headers.login, headers.passcode, connectCallback, errorCallback, closeEventCallback] = args;\n      }\n    }\n\n    return [headers, connectCallback, errorCallback, closeEventCallback];\n  }\n\n  /**\n   * Available for backward compatibility, please shift to using [Client#activate]{@link Client#activate}.\n   *\n   * **Deprecated**\n   *\n   * The `connect` method accepts different number of arguments and types. See the Overloads list. Use the\n   * version with headers to pass your broker specific options.\n   *\n   * overloads:\n   * - connect(headers, connectCallback)\n   * - connect(headers, connectCallback, errorCallback)\n   * - connect(login, passcode, connectCallback)\n   * - connect(login, passcode, connectCallback, errorCallback)\n   * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback)\n   * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback, host)\n   *\n   * params:\n   * - headers, see [Client#connectHeaders]{@link Client#connectHeaders}\n   * - connectCallback, see [Client#onConnect]{@link Client#onConnect}\n   * - errorCallback, see [Client#onStompError]{@link Client#onStompError}\n   * - closeEventCallback, see [Client#onWebSocketClose]{@link Client#onWebSocketClose}\n   * - login [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n   * - passcode [String], [Client#connectHeaders](../classes/Client.html#connectHeaders)\n   * - host [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n   *\n   * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n   */\n  public connect(...args: any[]): void {\n    const out = this._parseConnect(...args);\n\n    if (out[0]) { this.connectHeaders = out[0]; }\n    if (out[1]) { this.onConnect = out[1]; }\n    if (out[2]) { this.onStompError = out[2]; }\n    if (out[3]) { this.onWebSocketClose = out[3]; }\n\n    super.activate();\n  }\n\n  /**\n   * Available for backward compatibility, please shift to using [Client#deactivate]{@link Client#deactivate}.\n   *\n   * **Deprecated**\n   *\n   * See:\n   * [Client#onDisconnect]{@link Client#onDisconnect}, and\n   * [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n   *\n   * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n   */\n  public disconnect(disconnectCallback?: any, headers: StompHeaders = {}): void {\n    if (disconnectCallback) {\n      this.onDisconnect = disconnectCallback;\n    }\n    this.disconnectHeaders = headers;\n\n    super.deactivate();\n  }\n\n  /**\n   * Available for backward compatibility, use [Client#publish]{@link Client#publish}.\n   *\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\n   * and naming of destinations. The headers will, typically, be available to the subscriber.\n   * However, there may be special purpose headers corresponding to your STOMP broker.\n   *\n   *  **Deprecated**, use [Client#publish]{@link Client#publish}\n   *\n   * Note: Body must be String. You will need to covert the payload to string in case it is not string (e.g. JSON)\n   *\n   * ```javascript\n   *        client.send(\"/queue/test\", {priority: 9}, \"Hello, STOMP\");\n   *\n   *        // If you want to send a message with a body, you must also pass the headers argument.\n   *        client.send(\"/queue/test\", {}, \"Hello, STOMP\");\n   * ```\n   *\n   * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n   */\n  public send(destination: string, headers: {[key: string]: any} = {}, body: string = ''): void {\n    headers = (Object as any).assign({}, headers);\n\n    const skipContentLengthHeader = (headers['content-length'] === false);\n    if (skipContentLengthHeader) {\n      delete headers['content-length'];\n    }\n    this.publish({\n      destination,\n      headers: headers as StompHeaders,\n      body,\n      skipContentLengthHeader\n    });\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#reconnectDelay]{@link Client#reconnectDelay}.\n   *\n   * **Deprecated**\n   */\n  set reconnect_delay(value: number) {\n    this.reconnectDelay = value;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#webSocket]{@link Client#webSocket}.\n   *\n   * **Deprecated**\n   */\n  get ws(): any {\n    return this._webSocket;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#connectedVersion]{@link Client#connectedVersion}.\n   *\n   * **Deprecated**\n   */\n  get version() {\n    return this.connectedVersion;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n   *\n   * **Deprecated**\n   */\n  get onreceive(): messageCallbackType {\n    return this.onUnhandledMessage;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n   *\n   * **Deprecated**\n   */\n  set onreceive(value: messageCallbackType) {\n    this.onUnhandledMessage = value;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n   * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}.\n   *\n   * **Deprecated**\n   */\n  get onreceipt(): frameCallbackType {\n    return this.onUnhandledReceipt;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n   *\n   * **Deprecated**\n   */\n  set onreceipt(value: frameCallbackType) {\n    this.onUnhandledReceipt = value;\n  }\n\n  private _heartbeatInfo: HeartbeatInfo = new HeartbeatInfo(this);\n\n  /**\n   * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n   * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n   *\n   * **Deprecated**\n   */\n  get heartbeat() {\n    return this._heartbeatInfo;\n  }\n\n  /**\n   * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n   * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n   *\n   * **Deprecated**\n   */\n  set heartbeat(value: {incoming: number, outgoing: number}) {\n    this.heartbeatIncoming = value.incoming;\n    this.heartbeatOutgoing = value.outgoing;\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}