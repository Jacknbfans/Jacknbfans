{"ast":null,"code":"var _jsxFileName = \"/home/test01/websocketWithRabbitMQ/client/src/views/rabbitmq/index.jsx\";\n//import React from 'react';\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst response = await axios.get('http://104.128.95.54:3030/consumer'); // 发送GET请求到指定URL\n\nif (response.status === 200) {\n  setData(response.data); // 将返回的数据设置为状态变量data的值\n} else {\n  console.error(`Error ${response.status}: ${response.statusText}`);\n}\nclass LogComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      logs: []\n    }; // 初始化logs状态数组\n  }\n  componentDidMount() {\n    console.log('component mounted'); // 测试mounted事件\n\n    const originalConsoleLog = window.console.log; // 保存原始的console.log函数\n\n    window.console.log = (...args) => {\n      this.setState({\n        logs: [...this.state.logs, args]\n      }); // 更新logs状态数组\n\n      if (typeof originalConsoleLog === 'function') {\n        originalConsoleLog(...args); // 调用原始的console.log函数\n      } else {\n        throw new Error(\"originalConsoleLog is not a function\");\n      }\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rabbitmqMain\",\n      children: this.renderLogs()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 16\n    }, this);\n  }\n  renderLogs() {\n    return this.state.logs.map(([message]) => /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        whiteSpace: \"pre\"\n      },\n      children: `${message}`\n    }, Math.random(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 51\n    }, this));\n  }\n}\nexport default LogComponent;","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","response","get","status","setData","data","console","error","statusText","LogComponent","Component","constructor","props","state","logs","componentDidMount","log","originalConsoleLog","window","args","setState","Error","render","className","children","renderLogs","fileName","_jsxFileName","lineNumber","columnNumber","map","message","style","whiteSpace","Math","random"],"sources":["/home/test01/websocketWithRabbitMQ/client/src/views/rabbitmq/index.jsx"],"sourcesContent":["//import React from 'react';\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\n\n\n      const response = await axios.get('http://104.128.95.54:3030/consumer'); // 发送GET请求到指定URL\n      \n      if (response.status === 200) {\n        setData(response.data); // 将返回的数据设置为状态变量data的值\n      } else {\n        console.error(`Error ${response.status}: ${response.statusText}`);\n      }\n\n\nclass LogComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { logs: [] }; // 初始化logs状态数组\n    }\n    \n    componentDidMount() {\n        console.log('component mounted'); // 测试mounted事件\n        \n        const originalConsoleLog = window.console.log; // 保存原始的console.log函数\n        \n        window.console.log = (...args) => {\n            this.setState({ logs: [...this.state.logs, args] }); // 更新logs状态数组\n            \n            if (typeof originalConsoleLog === 'function') {\n                originalConsoleLog(...args); // 调用原始的console.log函数\n            } else {\n                throw new Error(\"originalConsoleLog is not a function\");\n            }\n        };\n    }\n    \n    render() {\n        return <div className='rabbitmqMain'>{this.renderLogs()}</div>;\n    }\n    \n    renderLogs() {\n        return this.state.logs.map(([message]) => <p key={Math.random()} style={{ whiteSpace: \"pre\" }}>{`${message}`}</p>);\n    }\n}\n \nexport default LogComponent;\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAIpB,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,oCAAoC,CAAC,CAAC,CAAC;;AAExE,IAAID,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;EAC3BC,OAAO,CAACH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC;AAC1B,CAAC,MAAM;EACLC,OAAO,CAACC,KAAK,CAAE,SAAQN,QAAQ,CAACE,MAAO,KAAIF,QAAQ,CAACO,UAAW,EAAC,CAAC;AACnE;AAGN,MAAMC,YAAY,SAASd,KAAK,CAACe,SAAS,CAAC;EACvCC,WAAWA,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MAAEC,IAAI,EAAE;IAAG,CAAC,CAAC,CAAC;EAC/B;EAEAC,iBAAiBA,CAAA,EAAG;IAChBT,OAAO,CAACU,GAAG,CAAC,mBAAmB,CAAC,CAAC,CAAC;;IAElC,MAAMC,kBAAkB,GAAGC,MAAM,CAACZ,OAAO,CAACU,GAAG,CAAC,CAAC;;IAE/CE,MAAM,CAACZ,OAAO,CAACU,GAAG,GAAG,CAAC,GAAGG,IAAI,KAAK;MAC9B,IAAI,CAACC,QAAQ,CAAC;QAAEN,IAAI,EAAE,CAAC,GAAG,IAAI,CAACD,KAAK,CAACC,IAAI,EAAEK,IAAI;MAAE,CAAC,CAAC,CAAC,CAAC;;MAErD,IAAI,OAAOF,kBAAkB,KAAK,UAAU,EAAE;QAC1CA,kBAAkB,CAAC,GAAGE,IAAI,CAAC,CAAC,CAAC;MACjC,CAAC,MAAM;QACH,MAAM,IAAIE,KAAK,CAAC,sCAAsC,CAAC;MAC3D;IACJ,CAAC;EACL;EAEAC,MAAMA,CAAA,EAAG;IACL,oBAAOtB,OAAA;MAAKuB,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAE,IAAI,CAACC,UAAU,CAAC;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAClE;EAEAJ,UAAUA,CAAA,EAAG;IACT,OAAO,IAAI,CAACZ,KAAK,CAACC,IAAI,CAACgB,GAAG,CAAC,CAAC,CAACC,OAAO,CAAC,kBAAK/B,OAAA;MAAuBgC,KAAK,EAAE;QAAEC,UAAU,EAAE;MAAM,CAAE;MAAAT,QAAA,EAAG,GAAEO,OAAQ;IAAC,GAA1DG,IAAI,CAACC,MAAM,CAAC,CAAC;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAiD,CAAC,CAAC;EACtH;AACJ;AAEA,eAAepB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}