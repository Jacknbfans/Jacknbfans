{"ast":null,"code":"var _jsxFileName = \"/home/test01/websocketWithRabbitMQ/client/src/views/rabbitmq/index.jsx\";\nimport React, { memo } from 'react';\n//import '../../ts/stomp.ts'\n\n/**\n\t/queue/queuename：使用默认转发器订阅/发布消息，默认由stomp自动创建一个持久化队列 \n\n\t/amq/queue/queuename：与/queue/queuename的区别在于队列不由stomp自动进行创建，队列不存在失败 \n\n\t/topic/routing_key：通过amq.topic转发器订阅/发布消息，订阅时默认创建一个临时队列，通过routing_key与topic进行绑定 \n\n\t/temp-queue/xxx：创建一个临时队列(只能在headers中的属性reply-to中使用)，可用于发送消息后通过临时队列接收回复消息，接收通过client.onreceive \n\n\t/exchange/exchangename/[routing_key]：通过转发器订阅/发布消息，转发器需要手动创建 \n\n\tclient.subscribe(destination,callback,headers) ：订阅消息 \n\n\tclient.send(destination,headers,body)：发布消息 \n\n\tclient.unsubscribe(id)：取消订阅，id为订阅时返回的编号 \n\n\tclient.onreceive：默认接收回调从临时队列获取消息 \n\t\n\t*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar ws = new WebSocket('ws://104.128.95.54:15672/ws');\n// 获得Stomp client对象\nvar client = Stomp.over(ws);\n\n// SockJS does not support heart-beat: disable heart-beats\nclient.heartbeat.outgoing = 0;\nclient.heartbeat.incoming = 0;\n\n// 定义连接成功回调函数\nvar on_connect = function (x) {\n  //data.body是接收到的数据\n  client.subscribe(\"/exchange/exchange/test\", function (data) {\n    var msg = data.body;\n    $(\"#message\").append(\"收到数据：\" + msg);\n  });\n};\n\n// 定义错误时回调函数\nvar on_error = function () {\n  console.log('error');\n};\n\n// 连接RabbitMQ\nclient.connect('guest', 'guest', on_connect, on_error, '/');\nconsole.log(\">>>连接上http://104.128.95.54:15672/\");\nconst Rabbitmq = /*#__PURE__*/memo(_c = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"rabbitmqMain\",\n    children: \"Rabbitmq\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n});\n_c2 = Rabbitmq;\nexport default Rabbitmq;\nvar _c, _c2;\n$RefreshReg$(_c, \"Rabbitmq$memo\");\n$RefreshReg$(_c2, \"Rabbitmq\");","map":{"version":3,"names":["React","memo","jsxDEV","_jsxDEV","ws","WebSocket","client","Stomp","over","heartbeat","outgoing","incoming","on_connect","x","subscribe","data","msg","body","$","append","on_error","console","log","connect","Rabbitmq","_c","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/home/test01/websocketWithRabbitMQ/client/src/views/rabbitmq/index.jsx"],"sourcesContent":["import React, { memo } from 'react'\n//import '../../ts/stomp.ts'\n\n/**\n\t/queue/queuename：使用默认转发器订阅/发布消息，默认由stomp自动创建一个持久化队列 \n\n\t/amq/queue/queuename：与/queue/queuename的区别在于队列不由stomp自动进行创建，队列不存在失败 \n\n\t/topic/routing_key：通过amq.topic转发器订阅/发布消息，订阅时默认创建一个临时队列，通过routing_key与topic进行绑定 \n\n\t/temp-queue/xxx：创建一个临时队列(只能在headers中的属性reply-to中使用)，可用于发送消息后通过临时队列接收回复消息，接收通过client.onreceive \n\n\t/exchange/exchangename/[routing_key]：通过转发器订阅/发布消息，转发器需要手动创建 \n\n\tclient.subscribe(destination,callback,headers) ：订阅消息 \n\n\tclient.send(destination,headers,body)：发布消息 \n\n\tclient.unsubscribe(id)：取消订阅，id为订阅时返回的编号 \n\n\tclient.onreceive：默认接收回调从临时队列获取消息 \n\t\n\t*/\n\n    var ws = new WebSocket('ws://104.128.95.54:15672/ws');\n\t// 获得Stomp client对象\n\tvar client = Stomp.over(ws);\n\n\t// SockJS does not support heart-beat: disable heart-beats\n\tclient.heartbeat.outgoing = 0;\n\tclient.heartbeat.incoming = 0;\n\n\t// 定义连接成功回调函数\n\tvar on_connect = function(x) {\n\t\t//data.body是接收到的数据\n\t\tclient.subscribe(\"/exchange/exchange/test\", function(data) {\n\t\t\tvar msg = data.body;\n\t\t\t$(\"#message\").append(\"收到数据：\" + msg);\n\t\t});\n\t};\n\n\t// 定义错误时回调函数\n\tvar on_error =  function() {\n\t\tconsole.log('error');\n\t};\n\n\t// 连接RabbitMQ\n\tclient.connect('guest', 'guest', on_connect, on_error, '/');\n\tconsole.log(\">>>连接上http://104.128.95.54:15672/\");\n\nconst Rabbitmq = memo(() => {\n    return (\n        <div className='rabbitmqMain'>Rabbitmq</div>\n    )\n})\n\nexport default Rabbitmq"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,IAAI,QAAQ,OAAO;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA,SAAAC,MAAA,IAAAC,OAAA;AAqBI,IAAIC,EAAE,GAAG,IAAIC,SAAS,CAAC,6BAA6B,CAAC;AACxD;AACA,IAAIC,MAAM,GAAGC,KAAK,CAACC,IAAI,CAACJ,EAAE,CAAC;;AAE3B;AACAE,MAAM,CAACG,SAAS,CAACC,QAAQ,GAAG,CAAC;AAC7BJ,MAAM,CAACG,SAAS,CAACE,QAAQ,GAAG,CAAC;;AAE7B;AACA,IAAIC,UAAU,GAAG,SAAAA,CAASC,CAAC,EAAE;EAC5B;EACAP,MAAM,CAACQ,SAAS,CAAC,yBAAyB,EAAE,UAASC,IAAI,EAAE;IAC1D,IAAIC,GAAG,GAAGD,IAAI,CAACE,IAAI;IACnBC,CAAC,CAAC,UAAU,CAAC,CAACC,MAAM,CAAC,OAAO,GAAGH,GAAG,CAAC;EACpC,CAAC,CAAC;AACH,CAAC;;AAED;AACA,IAAII,QAAQ,GAAI,SAAAA,CAAA,EAAW;EAC1BC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;AACrB,CAAC;;AAED;AACAhB,MAAM,CAACiB,OAAO,CAAC,OAAO,EAAE,OAAO,EAAEX,UAAU,EAAEQ,QAAQ,EAAE,GAAG,CAAC;AAC3DC,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;AAEjD,MAAME,QAAQ,gBAAGvB,IAAI,CAAAwB,EAAA,GAACA,CAAA,KAAM;EACxB,oBACItB,OAAA;IAAKuB,SAAS,EAAC,cAAc;IAAAC,QAAA,EAAC;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAEpD,CAAC,CAAC;AAAAC,GAAA,GAJIR,QAAQ;AAMd,eAAeA,QAAQ;AAAA,IAAAC,EAAA,EAAAO,GAAA;AAAAC,YAAA,CAAAR,EAAA;AAAAQ,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}