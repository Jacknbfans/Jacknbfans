{"ast":null,"code":"import React from'react';import axios from'axios';import{jsx as _jsx}from\"react/jsx-runtime\";class LogComponent extends React.Component{constructor(props){super(props);this.state={logs:[]};// 初始化logs状态数组\n}componentDidMount(){var _this=this;this.handleData();console.log('component mounted');// 测试mounted事件\nconst originalConsoleLog=window.console.log;// 保存原始的console.log函数\nwindow.console.log=function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this.setState({logs:[..._this.state.logs,args]});// 更新logs状态数组\nif(typeof originalConsoleLog==='function'){originalConsoleLog(...args);// 调用原始的console.log函数\n}else{throw new Error(\"originalConsoleLog is not a function\");}};}async handleData(){const response=await axios.get('http://104.128.95.54:3030/consumer');// 发送GET请求到指定URL\nif(response.status===200){console.log(response.data);// 将返回的数据设置为状态变量data的值\n}else{console.error(\"Error \".concat(response.status,\": \").concat(response.statusText));}}render(){return/*#__PURE__*/_jsx(\"div\",{className:\"rabbitmqMain\",children:this.renderLogs()});}renderLogs(){return this.state.logs.map(_ref=>{let[message]=_ref;return/*#__PURE__*/_jsx(\"p\",{style:{whiteSpace:\"pre\"},children:\"\".concat(message)},Math.random());});}}export default LogComponent;","map":{"version":3,"names":["React","axios","jsx","_jsx","LogComponent","Component","constructor","props","state","logs","componentDidMount","_this","handleData","console","log","originalConsoleLog","window","_len","arguments","length","args","Array","_key","setState","Error","response","get","status","data","error","concat","statusText","render","className","children","renderLogs","map","_ref","message","style","whiteSpace","Math","random"],"sources":["/home/test01/websocketWithRabbitMQ/client/src/views/rabbitmq/index.jsx"],"sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nclass LogComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { logs: [] }; // 初始化logs状态数组\n    }\n    \n    componentDidMount() {\n\t\tthis.handleData();\n\n        console.log('component mounted'); // 测试mounted事件\n        \n        const originalConsoleLog = window.console.log; // 保存原始的console.log函数\n        \n        window.console.log = (...args) => {\n            this.setState({ logs: [...this.state.logs, args] }); // 更新logs状态数组\n            \n            if (typeof originalConsoleLog === 'function') {\n                originalConsoleLog(...args); // 调用原始的console.log函数\n            } else {\n                throw new Error(\"originalConsoleLog is not a function\");\n            }\n        };\n    }\n\n\tasync handleData(){\n\t\tconst response = await axios.get('http://104.128.95.54:3030/consumer'); // 发送GET请求到指定URL\n      \n\t\tif (response.status === 200) {\n\t\t\tconsole.log(response.data); // 将返回的数据设置为状态变量data的值\n\t\t} else {\n\t\t\tconsole.error(`Error ${response.status}: ${response.statusText}`);\n\t\t}\n\t}\n    \n    render() {\n        return <div className='rabbitmqMain'>{this.renderLogs()}</div>;\n    }\n    \n    renderLogs() {\n        return this.state.logs.map(([message]) => <p key={Math.random()} style={{ whiteSpace: \"pre\" }}>{`${message}`}</p>);\n    }\n}\n \nexport default LogComponent;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,KAAK,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE1B,KAAM,CAAAC,YAAY,QAAS,CAAAJ,KAAK,CAACK,SAAU,CACvCC,WAAWA,CAACC,KAAK,CAAE,CACf,KAAK,CAACA,KAAK,CAAC,CACZ,IAAI,CAACC,KAAK,CAAG,CAAEC,IAAI,CAAE,EAAG,CAAC,CAAE;AAC/B,CAEAC,iBAAiBA,CAAA,CAAG,KAAAC,KAAA,MACtB,IAAI,CAACC,UAAU,CAAC,CAAC,CAEXC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC,CAAE;AAElC,KAAM,CAAAC,kBAAkB,CAAGC,MAAM,CAACH,OAAO,CAACC,GAAG,CAAE;AAE/CE,MAAM,CAACH,OAAO,CAACC,GAAG,CAAG,UAAa,SAAAG,IAAA,CAAAC,SAAA,CAAAC,MAAA,CAATC,IAAI,KAAAC,KAAA,CAAAJ,IAAA,EAAAK,IAAA,GAAAA,IAAA,CAAAL,IAAA,CAAAK,IAAA,IAAJF,IAAI,CAAAE,IAAA,EAAAJ,SAAA,CAAAI,IAAA,GACzBX,KAAI,CAACY,QAAQ,CAAC,CAAEd,IAAI,CAAE,CAAC,GAAGE,KAAI,CAACH,KAAK,CAACC,IAAI,CAAEW,IAAI,CAAE,CAAC,CAAC,CAAE;AAErD,GAAI,MAAO,CAAAL,kBAAkB,GAAK,UAAU,CAAE,CAC1CA,kBAAkB,CAAC,GAAGK,IAAI,CAAC,CAAE;AACjC,CAAC,IAAM,CACH,KAAM,IAAI,CAAAI,KAAK,CAAC,sCAAsC,CAAC,CAC3D,CACJ,CAAC,CACL,CAEH,KAAM,CAAAZ,UAAUA,CAAA,CAAE,CACjB,KAAM,CAAAa,QAAQ,CAAG,KAAM,CAAAxB,KAAK,CAACyB,GAAG,CAAC,oCAAoC,CAAC,CAAE;AAExE,GAAID,QAAQ,CAACE,MAAM,GAAK,GAAG,CAAE,CAC5Bd,OAAO,CAACC,GAAG,CAACW,QAAQ,CAACG,IAAI,CAAC,CAAE;AAC7B,CAAC,IAAM,CACNf,OAAO,CAACgB,KAAK,UAAAC,MAAA,CAAUL,QAAQ,CAACE,MAAM,OAAAG,MAAA,CAAKL,QAAQ,CAACM,UAAU,CAAE,CAAC,CAClE,CACD,CAEGC,MAAMA,CAAA,CAAG,CACL,mBAAO7B,IAAA,QAAK8B,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAE,IAAI,CAACC,UAAU,CAAC,CAAC,CAAM,CAAC,CAClE,CAEAA,UAAUA,CAAA,CAAG,CACT,MAAO,KAAI,CAAC3B,KAAK,CAACC,IAAI,CAAC2B,GAAG,CAACC,IAAA,MAAC,CAACC,OAAO,CAAC,CAAAD,IAAA,oBAAKlC,IAAA,MAAuBoC,KAAK,CAAE,CAAEC,UAAU,CAAE,KAAM,CAAE,CAAAN,QAAA,IAAAJ,MAAA,CAAKQ,OAAO,GAAxDG,IAAI,CAACC,MAAM,CAAC,CAAkD,CAAC,GAAC,CACtH,CACJ,CAEA,cAAe,CAAAtC,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}